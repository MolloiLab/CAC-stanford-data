è•bondsÄ¨cell_resultsäŸ$34a6ee83-5c46-4661-910e-925ea33ef625â¶queued¬§logsëà§lineˇ£msgí⁄7È  Activating new environment at `/tmp/jl_9WrQZc/Project.toml`
    Updating registry at `~/.julia/registries/General`
   Resolving package versions...
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [7f904dfe] + PlutoUI v0.7.38
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [6e696c72] + AbstractPlutoDingetjes v1.1.4
  [3da002f7] + ColorTypes v0.11.0
  [53c48c17] + FixedPointNumbers v0.8.4
  [47d2ed2b] + Hyperscript v0.0.4
  [ac1192a8] + HypertextLiteral v0.9.3
  [b5f81e59] + IOCapture v0.2.2
  [682c06a0] + JSON v0.21.3
  [69de0a69] + Parsers v2.3.1
  [7f904dfe] + PlutoUI v0.7.38
  [189a3867] + Reexport v1.2.2
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [f43a241f] + Downloads
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [ca575930] + NetworkOptions
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [a4e569a6] + Tar
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [29816b5a] + LibSSH2_jll
  [c8ffd9c3] + MbedTLS_jll
  [14a3606d] + MozillaCACerts_jll
  [83775a58] + Zlib_jll
  [8e850ede] + nghttp2_jll
  [3f19e933] + p7zip_jll
   Resolving package versions...
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [10745b16] + Statistics
  No Changes to `/tmp/jl_9WrQZc/Manifest.toml`
   Resolving package versions...
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [2913bbd2] + StatsBase v0.33.16
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [d360d2e6] + ChainRulesCore v1.14.0
  [9e997f8a] + ChangesOfVariables v0.1.3
  [34da2185] + Compat v3.43.0
  [9a962f9c] + DataAPI v1.10.0
  [864edb3b] + DataStructures v0.18.12
  [ffbed154] + DocStringExtensions v0.8.6
  [3587e190] + InverseFunctions v0.1.4
  [92d709cd] + IrrationalConstants v0.1.1
  [2ab3a3ac] + LogExpFunctions v0.3.14
  [e1d29d7a] + Missings v1.0.2
  [bac558e1] + OrderedCollections v1.4.1
  [a2af1166] + SortingAlgorithms v1.0.1
  [82ae8749] + StatsAPI v1.3.0
  [2913bbd2] + StatsBase v0.33.16
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [1a1011a3] + SharedArrays
   Resolving package versions...
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [787d08f9] + ImageMorphology v0.3.1
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [621f4979] + AbstractFFTs v1.1.0
  [79e6a3ab] + Adapt v3.3.3
  [c3611d14] + ColorVectorSpace v0.9.8
  [5ae59095] + Colors v0.12.8
  [a2bd30eb] + Graphics v1.1.1
  [a09fc81d] + ImageCore v0.9.3
  [787d08f9] + ImageMorphology v0.3.1
  [692b3bcd] + JLLWrappers v1.4.1
  [dbb5928d] + MappedArrays v0.4.1
  [e94cdb99] + MosaicViews v0.3.3
  [77ba4419] + NaNMath v0.3.7
  [6fe1bfb0] + OffsetArrays v1.11.0
  [5432bcbf] + PaddedViews v0.5.11
  [21216c6a] + Preferences v1.3.0
  [ae029012] + Requires v1.3.0
  [276daf66] + SpecialFunctions v2.1.4
  [cae243ae] + StackViews v0.1.1
  [62fd8b95] + TensorCore v0.1.1
  [06e1c1a7] + TiledIteration v0.3.1
  [efe28fd5] + OpenSpecFun_jll v0.5.5+0
  [e66e0078] + CompilerSupportLibraries_jll
  [05823500] + OpenLibm_jll
Precompiling project...
[32m  ‚úì [39m[90mImageCore[39m
[32m  ‚úì [39mImageMorphology
  2 dependencies successfully precompiled in 31 seconds (47 already precompiled)
   Resolving package versions...
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [6a3955dd] + ImageFiltering v0.7.1
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [aafaddc9] + CatIndices v0.2.2
  [ed09eef8] + ComputationalResources v0.3.2
  [dc8bdbbb] + CustomUnitRanges v1.0.2
  [4f61f5a4] + FFTViews v0.3.2
  [7a1cc6ca] + FFTW v1.4.6
  [c817782e] + ImageBase v0.1.5
  [6a3955dd] + ImageFiltering v0.7.1
  [90137ffa] + StaticArrays v1.4.4
  [f5851436] + FFTW_jll v3.3.10+0
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+2
  [856f044c] + MKL_jll v2022.0.0+0
  [4af54fe1] + LazyArtifacts
Precompiling project...
[32m  ‚úì [39m[90mStaticArrays[39m
[32m  ‚úì [39mImageFiltering
  2 dependencies successfully precompiled in 25 seconds (58 already precompiled)
   Resolving package versions...
   Installed CodecZlib ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ v0.7.0
   Installed WeakRefStrings ‚îÄ v1.4.2
   Installed InlineStrings ‚îÄ‚îÄ v1.1.2
   Installed SentinelArrays ‚îÄ v1.3.12
   Installed FilePathsBase ‚îÄ‚îÄ v0.9.18
   Installed CSV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ v0.10.4
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [336ed68f] + CSV v0.10.4
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [336ed68f] + CSV v0.10.4
  [944b1d66] + CodecZlib v0.7.0
  [e2d170a0] + DataValueInterfaces v1.0.0
  [48062228] + FilePathsBase v0.9.18
  [842dd82b] + InlineStrings v1.1.2
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [2dfb63ee] + PooledArrays v1.4.2
  [91c51154] + SentinelArrays v1.3.12
  [3783bdb8] + TableTraits v1.0.1
  [bd369af6] + Tables v1.7.0
  [3bb67fe8] + TranscodingStreams v0.9.6
  [ea10d353] + WeakRefStrings v1.4.2
  [9fa8497b] + Future
Precompiling project...
[32m  ‚úì [39m[90mInlineStrings[39m
[32m  ‚úì [39m[90mCodecZlib[39m
[32m  ‚úì [39m[90mSentinelArrays[39m
[32m  ‚úì [39m[90mFilePathsBase[39m
[32m  ‚úì [39m[90mWeakRefStrings[39m
[32m  ‚úì [39mCSV
  6 dependencies successfully precompiled in 7 seconds (66 already precompiled)
   Resolving package versions...
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [a93c6f00] + DataFrames v1.3.4
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [a8cc5b0e] + Crayons v4.1.1
  [a93c6f00] + DataFrames v1.3.4
  [59287772] + Formatting v0.4.2
  [41ab1584] + InvertedIndices v1.1.0
  [08abe8d2] + PrettyTables v1.3.1
   Resolving package versions...
   Installed ShiftedArrays ‚îÄ v1.0.0
   Installed GLM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ v1.7.0
   Installed StatsModels ‚îÄ‚îÄ‚îÄ v0.6.30
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [38e38edf] + GLM v1.7.0
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [b429d917] + DensityInterface v0.4.0
  [31c24e10] + Distributions v0.25.58
  [1a297f60] + FillArrays v0.13.2
  [38e38edf] + GLM v1.7.0
  [90014a1f] + PDMats v0.11.9
  [1fd47b50] + QuadGK v2.4.2
  [79098fc4] + Rmath v0.7.0
  [1277b4bf] + ShiftedArrays v1.0.0
  [4c63d2b9] + StatsFuns v0.9.18
  [3eaba693] + StatsModels v0.6.30
  [f50d1b31] + Rmath_jll v0.3.0+0
  [4607b0f0] + SuiteSparse
Precompiling project...
[32m  ‚úì [39m[90mShiftedArrays[39m
[32m  ‚úì [39m[90mStatsModels[39m
[32m  ‚úì [39mGLM
  3 dependencies successfully precompiled in 3 seconds (85 already precompiled)
    Updating git-repo `https://github.com/JuliaHealth/DICOM.jl`
   Resolving package versions...
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [a26e6606] + DICOM v0.10.1 `https://github.com/JuliaHealth/DICOM.jl#master`
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [a26e6606] + DICOM v0.10.1 `https://github.com/JuliaHealth/DICOM.jl#master`
    Updating git-repo `https://github.com/Dale-Black/DICOMUtils.jl`
   Resolving package versions...
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [d427e4c1] + DICOMUtils v0.1.0 `https://github.com/Dale-Black/DICOMUtils.jl#master`
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [d427e4c1] + DICOMUtils v0.1.0 `https://github.com/Dale-Black/DICOMUtils.jl#master`
  [ab62b9b5] + DeepDiffs v1.2.0
  [98d24dd4] + TestSetExtensions v2.0.0
     Cloning git-repo `https://github.com/Dale-Black/PhantomSegmentation.jl`
    Updating git-repo `https://github.com/Dale-Black/PhantomSegmentation.jl`
   Resolving package versions...
   Installed ImageFiltering ‚îÄ v0.6.22
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [6a3955dd] ‚Üì ImageFiltering v0.7.1 ‚áí v0.6.22
  [9bf6ac95] + PhantomSegmentation v0.1.0 `https://github.com/Dale-Black/PhantomSegmentation.jl#main`
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [1520ce14] + AbstractTrees v0.3.4
  [ec485272] + ArnoldiMethod v0.2.0
  [aaaa29a8] + Clustering v0.14.2
  [b4f34e82] + Distances v0.10.7
  [5789e2e9] + FileIO v1.14.0
  [86223c79] + Graphs v1.6.0
  [c817782e] - ImageBase v0.1.5
  [d9b9e9a0] + ImageComponentAnalysis v0.2.0
  [6a3955dd] ‚Üì ImageFiltering v0.7.1 ‚áí v0.6.22
  [80713f31] + ImageSegmentation v1.7.0
  [d25df0c9] + Inflate v0.1.2
  [c8e1da08] + IterTools v1.4.0
  [033835bb] + JLD2 v0.4.22
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.3
  [1914dd2f] + MacroTools v0.5.9
  [626554b9] + MetaGraphs v0.7.1
  [b8a86587] + NearestNeighbors v0.4.10
  [d96e819e] + Parameters v0.12.3
  [9bf6ac95] + PhantomSegmentation v0.1.0 `https://github.com/Dale-Black/PhantomSegmentation.jl#main`
  [145d500b] + PlanarConvexHulls v0.3.0
  [dee08c22] + RegionTrees v0.3.2
  [699a6c99] + SimpleTraits v0.9.4
  [47aef6b3] + SimpleWeightedGraphs v1.2.1
  [90137ffa] ‚Üì StaticArrays v1.4.4 ‚áí v0.12.5
  [3a884ed6] + UnPack v1.0.2
Precompiling project...
[32m  ‚úì [39m[90mArnoldiMethod[39m
[32m  ‚úì [39m[90mGraphs[39m
[32m  ‚úì [39m[90mSimpleWeightedGraphs[39m
[32m  ‚úì [39m[90mMetaGraphs[39m
[32m  ‚úì [39mImageFiltering
[32m  ‚úì [39m[90mImageSegmentation[39m
[32m  ‚úì [39m[90mImageComponentAnalysis[39m
[32m  ‚úì [39mPhantomSegmentation
  8 dependencies successfully precompiled in 30 seconds (105 already precompiled)
     Cloning git-repo `https://github.com/Dale-Black/CalciumScoring.jl`
    Updating git-repo `https://github.com/Dale-Black/CalciumScoring.jl`
   Resolving package versions...
   Installed RecipesBase ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ v1.2.1
   Installed MutableArithmetics ‚îÄ v1.0.0
   Installed Polynomials ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ v3.0.0
   Installed DSP ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ v0.7.5
    Updating `/tmp/jl_9WrQZc/Project.toml`
  [9c0cb1da] + CalciumScoring v0.1.0 `https://github.com/Dale-Black/CalciumScoring.jl#master`
  [6a3955dd] ‚Üì ImageFiltering v0.6.22 ‚áí v0.6.21
  [787d08f9] ‚Üì ImageMorphology v0.3.1 ‚áí v0.2.11
    Updating `/tmp/jl_9WrQZc/Manifest.toml`
  [ec485272] ‚Üì ArnoldiMethod v0.2.0 ‚áí v0.1.0
  [13072b0f] + AxisAlgorithms v1.0.1
  [39de3d68] + AxisArrays v0.4.5
  [fa961155] + CEnum v0.4.2
  [9c0cb1da] + CalciumScoring v0.1.0 `https://github.com/Dale-Black/CalciumScoring.jl#master`
  [49dc2e85] + Calculus v0.5.1
  [150eb455] + CoordinateTransformations v0.6.2
  [717857b8] + DSP v0.7.5
  [fa6b7ba4] + DualNumbers v0.6.8
  [bbac6d45] + IdentityRanges v0.3.1
  [2803e5a7] + ImageAxes v0.6.9
  [f332f351] + ImageContrastAdjustment v0.3.7
  [a09fc81d] ‚Üì ImageCore v0.9.3 ‚áí v0.8.22
  [51556ac3] + ImageDistances v0.2.13
  [6a3955dd] ‚Üì ImageFiltering v0.6.22 ‚áí v0.6.21
  [82e4d734] + ImageIO v0.5.9
  [6218d12a] + ImageMagick v1.2.2
  [bc367c6b] + ImageMetadata v0.9.5
  [787d08f9] ‚Üì ImageMorphology v0.3.1 ‚áí v0.2.11
  [2996bd0c] + ImageQualityIndexes v0.2.2
  [80713f31] ‚Üì ImageSegmentation v1.7.0 ‚áí v1.5.1
  [4e3cecfd] + ImageShow v0.3.1
  [02fcd773] + ImageTransformations v0.8.13
  [916415d5] + Images v0.24.1
  [9b13fd28] + IndirectArrays v0.5.1
  [a98d9a8b] + Interpolations v0.13.6
  [8197267c] + IntervalSets v0.6.1
  [093fc24a] + LightGraphs v1.3.5
  [626554b9] ‚Üì MetaGraphs v0.7.1 ‚áí v0.6.8
  [d8a4904e] + MutableArithmetics v1.0.0
  [f09324ee] + Netpbm v1.0.1
  [52e1d378] + OpenEXR v0.3.2
  [f57f5aa1] + PNGFiles v0.3.16
  [eebad327] + PkgVersion v0.1.1
  [f27b6e38] + Polynomials v3.0.0
  [92933f4c] + ProgressMeter v1.7.2
  [94ee1d12] + Quaternions v0.4.9
  [b3c3ace0] + RangeArrays v0.3.2
  [c84ed2f1] + Ratios v0.4.3
  [3cdcf5f2] + RecipesBase v1.2.1
  [6038ab10] + Rotations v1.2.0
  [731e570b] + TiffImages v0.5.5
  [efce3f68] + WoodburyMatrices v0.5.5
  [c73af94c] + ImageMagick_jll v6.9.10-12+3
  [905a6f67] + Imath_jll v3.1.2+0
  [aacddb02] + JpegTurbo_jll v2.1.2+0
  [88015f11] + LERC_jll v3.0.0+1
  [89763e89] + Libtiff_jll v4.3.0+1
  [18a262bb] + OpenEXR_jll v3.1.1+0
  [3161d3a3] + Zstd_jll v1.5.2+0
  [b53b4c65] + libpng_jll v1.6.38+0
Precompiling project...
[32m  ‚úì [39m[90mIntervalSets[39m
[32m  ‚úì [39m[90mRecipesBase[39m
[32m  ‚úì [39m[90mImageMagick_jll[39m
[32m  ‚úì [39m[90mAxisArrays[39m
[32m  ‚úì [39m[90mImageAxes[39m
[32m  ‚úì [39m[90mMutableArithmetics[39m
[32m  ‚úì [39m[90mImageMagick[39m
[32m  ‚úì [39m[90mImageMetadata[39m
[32m  ‚úì [39m[90mPolynomials[39m
[32m  ‚úì [39m[90mDSP[39m
[32m  ‚úì [39m[90mImages[39m
[32m  ‚úì [39m[90mImageSegmentation[39m
[91m  ‚úó [39mCalciumScoring
[32m  ‚úì [39mPhantomSegmentation
  13 dependencies successfully precompiled in 26 seconds (144 already precompiled)
  [91m1[39m dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package
ERROR: LoadError: SystemError: opening file "/home/runner/.julia/packages/CalciumScoring/tENzB/src/integrated.jl": No such file or directory
Stacktrace:
  [1] systemerror(p::String, errno::Int32; extrainfo::Nothing)
    @ Base ./error.jl:168
  [2] #systemerror#62
    @ ./error.jl:167 [inlined]
  [3] systemerror
    @ ./error.jl:167 [inlined]
  [4] open(fname::String; lock::Bool, read::Nothing, write::Nothing, create::Nothing, truncate::Nothing, append::Nothing)
    @ Base ./iostream.jl:293
  [5] open
    @ ./iostream.jl:282 [inlined]
  [6] open(f::Base.var"#326#327"{String}, args::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:328
  [7] open
    @ ./io.jl:328 [inlined]
  [8] read
    @ ./io.jl:434 [inlined]
  [9] _include(mapexpr::Function, mod::Module, _path::String)
    @ Base ./loading.jl:1166
 [10] include(mod::Module, _path::String)
    @ Base ./Base.jl:384
 [11] include(x::String)
    @ CalciumScoring ~/.julia/packages/CalciumScoring/tENzB/src/CalciumScoring.jl:1
 [12] top-level scope
    @ ~/.julia/packages/CalciumScoring/tENzB/src/CalciumScoring.jl:9
 [13] include
    @ ./Base.jl:384 [inlined]
 [14] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)
    @ Base ./loading.jl:1235
 [15] top-level scope
    @ none:1
 [16] eval
    @ ./boot.jl:360 [inlined]
 [17] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [18] top-level scope
    @ none:1
in expression starting at /home/runner/.julia/packages/CalciumScoring/tENzB/src/CalciumScoring.jl:1
™text/plainßcell_idŸ$34a6ee83-5c46-4661-910e-925ea33ef625¶kwargsê¢idπMain_PlutoRunner_80680cb1§fileŸB/home/runner/.julia/packages/Pluto/mnDsx/src/runner/PlutoRunner.jl•group´PlutoRunner•levelÆLogLevel(-555)ßrunning¬¶outputÜ§bodyÇ£msgŸâFailed to precompile CalciumScoring [9c0cb1da-21b1-4615-967b-153e03110a28] to /home/runner/.julia/compiled/v1.6/CalciumScoring/jl_96cVoa.™stacktraceóÖ§callØerror(::String)ßinlined¬§file®error.jl§line!§path™./error.jlÖ§callŸlcompilecache(::Base.PkgId, ::String, ::IOContext{Base.PipeEndpoint}, ::IOContext{Base.PipeEndpoint}, ::Bool)ßinlined¬§file™loading.jl§lineÕi§path¨./loading.jlÖ§callŸ$compilecache(::Base.PkgId, ::String)ßinlined¬§file™loading.jl§lineÕ1§path¨./loading.jlÖ§call∂_require(::Base.PkgId)ßinlined¬§file™loading.jl§lineÕ§path¨./loading.jlÖ§callµrequire(::Base.PkgId)ßinlined¬§file™loading.jl§lineÕ®§path¨./loading.jlÖ§callªrequire(::Module, ::Symbol)ßinlined¬§file™loading.jl§lineÕõ§path¨./loading.jlÖ§callØtop-level scopeßinlined¬§fileŸDintegrated_scoring_script.jl#==#34a6ee83-5c46-4661-910e-925ea33ef625§line§pathŸÄ/home/runner/work/CAC-stanford-data/CAC-stanford-data/julia/integrated_scoring_script.jl#==#34a6ee83-5c46-4661-910e-925ea33ef625§mimeŸ'application/vnd.pluto.stacktrace+object¨rootassignee¿≤last_run_timestampÀAÿû[@Îí∞persist_js_state¬∑has_pluto_hook_features¬ßcell_idŸ$34a6ee83-5c46-4661-910e-925ea33ef625πdepends_on_disabled_cells¬ßruntime¿µpublished_object_keysêßerrored√Ÿ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6bâ¶queued¬§logsêßrunning¬¶outputÜ§body†§mime™text/plain¨rootassignee¿≤last_run_timestampÀAÿû[C ã∞persist_js_state¬∑has_pluto_hook_features¬ßcell_idŸ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6bπdepends_on_disabled_cells¬ßruntimeÕEàµpublished_object_keysêßerrored¬Ÿ$e730f5ae-ae32-4869-9a59-98933bcba510â¶queued¬§logsêßrunning¬¶outputÜ§body†§mime™text/plain¨rootassignee¿≤last_run_timestampÀAÿû[Cÿ†#∞persist_js_state¬∑has_pluto_hook_features¬ßcell_idŸ$e730f5ae-ae32-4869-9a59-98933bcba510πdepends_on_disabled_cells¬ßruntimeŒ ó%Qµpublished_object_keysêßerrored¬Ÿ$75e9e00c-9603-46e9-a009-7cdc76f1a2ccâ¶queued¬§logsêßrunning¬¶outputÜ§bodyŸÄ"/home/runner/work/CAC-stanford-data/CAC-stanford-data/data/output/Canon_Aquilion_One_Vision_integrated_score_script/output.csv"§mime™text/plain¨rootassignee´output_path≤last_run_timestampÀAÿû[Cﬁ©m∞persist_js_state¬∑has_pluto_hook_features¬ßcell_idŸ$75e9e00c-9603-46e9-a009-7cdc76f1a2ccπdepends_on_disabled_cells¬ßruntimeÕ∆µpublished_object_keysêßerrored¬Ÿ$a0872982-dcbb-4278-beaf-70409400b514â¶queued¬§logsêßrunning¬¶outputÜ§bodyÇ£msgŸ!UndefVarError: new_df not defined™stacktraceëÖ§callØtop-level scopeßinlined¬§fileŸDintegrated_scoring_script.jl#==#a0872982-dcbb-4278-beaf-70409400b514§line§pathŸÄ/home/runner/work/CAC-stanford-data/CAC-stanford-data/julia/integrated_scoring_script.jl#==#a0872982-dcbb-4278-beaf-70409400b514§mimeŸ'application/vnd.pluto.stacktrace+object¨rootassignee¿≤last_run_timestampÀAÿû[C‚ÀG∞persist_js_state¬∑has_pluto_hook_features¬ßcell_idŸ$a0872982-dcbb-4278-beaf-70409400b514πdepends_on_disabled_cells¬ßruntime¿µpublished_object_keysêßerrored√Ÿ$c34ae2e3-466f-4280-8786-b0e92dbb2792â¶queued¬§logsêßrunning¬¶outputÜ§body⁄ô<script>const getParentCell = el => el.closest("pluto-cell")

const getHeaders = () => {
	const depth = Math.max(1, Math.min(6, 3)) // should be in range 1:6
	const range = Array.from({length: depth}, (x, i) => i+1) // [1, ..., depth]
	
	const selector = range.map(i => `pluto-notebook pluto-cell h${i}`).join(",")
	return Array.from(document.querySelectorAll(selector))
}

const indent = true
const aside = true

const clickHandler = (event) => {
	const path = (event.path || event.composedPath())
	const toc = path.find(elem => elem?.classList?.contains?.("toc-toggle"))
	if (toc) {
		event.stopImmediatePropagation()
		toc.closest(".plutoui-toc").classList.toggle("hide")
	}
}

document.addEventListener("click", clickHandler)


const render = (el) => html`${el.map(h => {
	const parent_cell = getParentCell(h)

	const a = html`<a 
		class="${h.nodeName}" 
		href="#${parent_cell.id}"
	>${h.innerText}</a>`
	/* a.onmouseover=()=>{
		parent_cell.firstElementChild.classList.add(
			'highlight-pluto-cell-shoulder'
		)
	}
	a.onmouseout=() => {
		parent_cell.firstElementChild.classList.remove(
			'highlight-pluto-cell-shoulder'
		)
	} */
	a.onclick=(e) => {
		e.preventDefault();
		h.scrollIntoView({
			behavior: 'smooth', 
			block: 'start'
		})
	}

	return html`<div class="toc-row">${a}</div>`
})}`

const tocNode = html`<nav class="plutoui-toc">
	<header>
     <span class="toc-toggle open-toc">üìñ</span>
     <span class="toc-toggle closed-toc">üìï</span>
	Table of Contents</header>
	<section></section>
</nav>`

tocNode.classList.toggle("aside", aside)
tocNode.classList.toggle("indent", indent)

const updateCallback = () => {
	tocNode.querySelector("section").replaceWith(
		html`<section>${render(getHeaders())}</section>`
	)
}
updateCallback()
setTimeout(updateCallback, 100)
setTimeout(updateCallback, 1000)
setTimeout(updateCallback, 5000)

const notebook = document.querySelector("pluto-notebook")


// We have a mutationobserver for each cell:
const observers = {
	current: [],
}

const createCellObservers = () => {
	observers.current.forEach((o) => o.disconnect())
	observers.current = Array.from(notebook.querySelectorAll("pluto-cell")).map(el => {
		const o = new MutationObserver(updateCallback)
		o.observe(el, {attributeFilter: ["class"]})
		return o
	})
}
createCellObservers()

// And one for the notebook's child list, which updates our cell observers:
const notebookObserver = new MutationObserver(() => {
	updateCallback()
	createCellObservers()
})
notebookObserver.observe(notebook, {childList: true})

// And finally, an observer for the document.body classList, to make sure that the toc also works when if is loaded during notebook initialization
const bodyClassObserver = new MutationObserver(updateCallback)
bodyClassObserver.observe(document.body, {attributeFilter: ["class"]})

// Hide/show the ToC when the screen gets small
let m = matchMedia("(max-width: 1000px)")
let match_listener = () => 
	tocNode.classList.toggle("hide", m.matches)
match_listener()
m.addListener(match_listener)

invalidation.then(() => {
	notebookObserver.disconnect()
	bodyClassObserver.disconnect()
	observers.current.forEach((o) => o.disconnect())
	document.removeEventListener("click", clickHandler)
	m.removeListener(match_listener)
})

return tocNode
</script><style>
.plutoui-toc {
	--main-bg-color: unset;
	--pluto-output-color: hsl(0, 0%, 36%);
	--pluto-output-h-color: hsl(0, 0%, 21%);
}

@media (prefers-color-scheme: dark) {
	.plutoui-toc {
		--main-bg-color: hsl(0deg 0% 21%);
		--pluto-output-color: hsl(0, 0%, 90%);
		--pluto-output-h-color: hsl(0, 0%, 97%);
	}
}

.plutoui-toc.aside {
	color: var(--pluto-output-color);
	position:fixed;
	right: 1rem;
	top: 5rem;
	width: min(80vw, 300px);
	padding: 10px;
	border: 3px solid rgba(0, 0, 0, 0.15);
	border-radius: 10px;
	box-shadow: 0 0 11px 0px #00000010;
	/* That is, viewport minus top minus Live Docs */
	max-height: calc(100vh - 5rem - 56px);
	overflow: auto;
	z-index: 40;
	background-color: var(--main-bg-color);
	transition: transform 300ms cubic-bezier(0.18, 0.89, 0.45, 1.12);
}

.plutoui-toc.aside.hide {
	transform: translateX(calc(100% - 28px));
}

.plutoui-toc.aside.hide .open-toc,
.plutoui-toc.aside:not(.hide) .closed-toc,
.plutoui-toc:not(.aside) .closed-toc {
	display: none;
}

@media (prefers-reduced-motion) {
  .plutoui-toc.aside {
    transition-duration: 0s;
  }
}

.toc-toggle {
	cursor: pointer;
	padding: 1em;
	margin: -1em;
    margin-right: -0.7em;
}

.plutoui-toc header {
	display: block;
	font-size: 1.5em;
	margin-top: -0.1em;
	margin-bottom: 0.4em;
	padding-bottom: 0.4em;
	margin-left: 0;
	margin-right: 0;
	font-weight: bold;
	border-bottom: 2px solid rgba(0, 0, 0, 0.15);
}

.plutoui-toc section .toc-row {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
	padding-bottom: 2px;
}

.highlight-pluto-cell-shoulder {
	background: rgba(0, 0, 0, 0.05);
	background-clip: padding-box;
}

.plutoui-toc section a {
	text-decoration: none;
	font-weight: normal;
	color: var(--pluto-output-color);
}
.plutoui-toc section a:hover {
	color: var(--pluto-output-h-color);
}

.plutoui-toc.indent section a.H1 {
	font-weight: 700;
	line-height: 1em;
}

.plutoui-toc.indent section a.H1 {
	padding-left: 0px;
}
.plutoui-toc.indent section a.H2 {
	padding-left: 10px;
}
.plutoui-toc.indent section a.H3 {
	padding-left: 20px;
}
.plutoui-toc.indent section a.H4 {
	padding-left: 30px;
}
.plutoui-toc.indent section a.H5 {
	padding-left: 40px;
}
.plutoui-toc.indent section a.H6 {
	padding-left: 50px;
}
</style>§mime©text/html¨rootassignee¿≤last_run_timestampÀAÿû[Cgo∞persist_js_state¬∑has_pluto_hook_features¬ßcell_idŸ$c34ae2e3-466f-4280-8786-b0e92dbb2792πdepends_on_disabled_cells¬ßruntimeÕÉ§µpublished_object_keysêßerrored¬Ÿ$7d8366d8-9cc5-49b3-8db3-1b9db6d12c92â¶queued¬§logsêßrunning¬¶outputÜ§bodyÖ¶prefix•Int64®elementsöíí°1™text/plainíí°2™text/plainíí°3™text/plainíí°4™text/plainíí°5™text/plainíí°6™text/plainíí°7™text/plainíí°8™text/plainí	í°9™text/plainí
í¢10™text/plain§type•Array¨prefix_short†®objectid∞c9471ab63f3f9b08§mimeŸ!application/vnd.pluto.tree+object¨rootassignee•scans≤last_run_timestampÀAÿû[CZ6∞persist_js_state¬∑has_pluto_hook_features¬ßcell_idŸ$7d8366d8-9cc5-49b3-8db3-1b9db6d12c92πdepends_on_disabled_cells¬ßruntimeÕ<åµpublished_object_keysêßerrored¬Ÿ$47dfa770-47ea-47ee-98e7-87da471ab01câ¶queued¬§logsêßrunning¬¶outputÜ§bodyÇ£msgŸDBoundsError: attempt to access 0-element Vector{Any} at index [1:10]™stacktraceîÖ§callŸ;throw_boundserror(::Vector{Any}, ::Tuple{UnitRange{Int64}})ßinlined¬§file∞abstractarray.jl§lineÕã§path≤./abstractarray.jlÖ§call´checkboundsßinlined√§file∞abstractarray.jl§lineÕh§path≤./abstractarray.jlÖ§call®getindexßinlined√§file®array.jl§lineÕ+§path™./array.jlÖ§callØtop-level scopeßinlined√§fileŸDintegrated_scoring_script.jl#==#47dfa770-47ea-47ee-98e7-87da471ab01c§line§pathŸÄ/home/runner/work/CAC-stanford-data/CAC-stanford-data/julia/integrated_scoring_script.jl#==#47dfa770-47ea-47ee-98e7-87da471ab01c§mimeŸ'application/vnd.pluto.stacktrace+object¨rootassignee¶new_df≤last_run_timestampÀAÿû[C +$∞persist_js_state¬∑has_pluto_hook_features¬ßcell_idŸ$47dfa770-47ea-47ee-98e7-87da471ab01cπdepends_on_disabled_cells¬ßruntime¿µpublished_object_keysêßerrored√Ÿ$60fe5916-a1a6-11ec-1fbe-8952690e9d06â¶queued¬§logsêßrunning¬¶outputÜ§bodyÇ£msgŸxIOError: readdir("/Users/daleblack/Google Drive/Datasets/Canon_Aquilion_One_Vision"): no such file or directory (ENOENT)™stacktraceóÖ§call≥check_channel_stateßinlined√§file´channels.jl§lineÃ™§path≠./channels.jlÖ§callŸItake_unbuffered(::Channel{Tuple{String, Vector{String}, Vector{String}}})ßinlined¬§file´channels.jl§lineÕì§path≠./channels.jlÖ§call•take!ßinlined√§file´channels.jl§lineÕ§path≠./channels.jlÖ§callŸLiterate(::Channel{Tuple{String, Vector{String}, Vector{String}}}, ::Nothing)ßinlined¬§file´channels.jl§lineÕ—§path≠./channels.jlÖ§callßiterateßinlined√§file´channels.jl§lineÕ–§path≠./channels.jlÖ§call∫dcm_list_builder(::String)ßinlined¬§fileßload.jl§line§pathŸ9/home/runner/.julia/packages/DICOMUtils/y9sLG/src/load.jlÖ§callØtop-level scopeßinlined¬§fileŸDintegrated_scoring_script.jl#==#60fe5916-a1a6-11ec-1fbe-8952690e9d06§line§pathŸÄ/home/runner/work/CAC-stanford-data/CAC-stanford-data/julia/integrated_scoring_script.jl#==#60fe5916-a1a6-11ec-1fbe-8952690e9d06§mimeŸ'application/vnd.pluto.stacktrace+object¨rootassignee¿≤last_run_timestampÀAÿû[C©b∞persist_js_state¬∑has_pluto_hook_features¬ßcell_idŸ$60fe5916-a1a6-11ec-1fbe-8952690e9d06πdepends_on_disabled_cells¬ßruntime¿µpublished_object_keysêßerrored√Ÿ$c8b89590-c7c4-4c40-93c4-9fd905eb3328â¶queued¬§logsêßrunning¬¶outputÜ§bodyŸ2<div class="markdown"><h1>Save Results</h1>
</div>§mime©text/html¨rootassignee¿≤last_run_timestampÀAÿû[Ëõ∞persist_js_state¬∑has_pluto_hook_features¬ßcell_idŸ$c8b89590-c7c4-4c40-93c4-9fd905eb3328πdepends_on_disabled_cells¬ßruntimeŒ {Ôµpublished_object_keysêßerrored¬±cell_dependenciesäŸ$34a6ee83-5c46-4661-910e-925ea33ef625Ñ¥precedence_heuristicßcell_idŸ$34a6ee83-5c46-4661-910e-925ea33ef625¥downstream_cells_mapç£CSVëŸ$a0872982-dcbb-4278-beaf-70409400b514£PkgëŸ$34a6ee83-5c46-4661-910e-925ea33ef625™Statisticsê≥PhantomSegmentationêÆCalciumScoringêßPlutoUIêØImageMorphologyê•DICOMê©quantile!ê™DICOMUtilsëŸ$60fe5916-a1a6-11ec-1fbe-8952690e9d06™DataFramesêÆImageFilteringê£GLMê≤upstream_cells_mapÖßPkg.addê£PkgëŸ$34a6ee83-5c46-4661-910e-925ea33ef625¨Pkg.activateê≥Pkg.Registry.updateê©mktempdirêŸ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6bÑ¥precedence_heuristic	ßcell_idŸ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6b¥downstream_cells_mapÇ©BASE_PATHëŸ$60fe5916-a1a6-11ec-1fbe-8952690e9d06¶VENDERìŸ$60fe5916-a1a6-11ec-1fbe-8952690e9d06Ÿ$e730f5ae-ae32-4869-9a59-98933bcba510Ÿ$75e9e00c-9603-46e9-a009-7cdc76f1a2cc≤upstream_cells_mapÄŸ$e730f5ae-ae32-4869-9a59-98933bcba510Ñ¥precedence_heuristic	ßcell_idŸ$e730f5ae-ae32-4869-9a59-98933bcba510¥downstream_cells_mapÄ≤upstream_cells_mapá•mkdirê¶stringê¢cdê£pwdê°~ê•isdirê¶VENDERëŸ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6bŸ$75e9e00c-9603-46e9-a009-7cdc76f1a2ccÑ¥precedence_heuristic	ßcell_idŸ$75e9e00c-9603-46e9-a009-7cdc76f1a2cc¥downstream_cells_mapÅ´output_pathëŸ$a0872982-dcbb-4278-beaf-70409400b514≤upstream_cells_mapÑ¢cdê¶stringê£pwdê¶VENDERëŸ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6bŸ$a0872982-dcbb-4278-beaf-70409400b514Ñ¥precedence_heuristic	ßcell_idŸ$a0872982-dcbb-4278-beaf-70409400b514¥downstream_cells_mapÄ≤upstream_cells_mapÑ£CSVëŸ$34a6ee83-5c46-4661-910e-925ea33ef625¶new_dfëŸ$47dfa770-47ea-47ee-98e7-87da471ab01c´output_pathëŸ$75e9e00c-9603-46e9-a009-7cdc76f1a2cc©CSV.writeêŸ$c34ae2e3-466f-4280-8786-b0e92dbb2792Ñ¥precedence_heuristic	ßcell_idŸ$c34ae2e3-466f-4280-8786-b0e92dbb2792¥downstream_cells_mapÄ≤upstream_cells_mapÅØTableOfContentsêŸ$7d8366d8-9cc5-49b3-8db3-1b9db6d12c92Ñ¥precedence_heuristic	ßcell_idŸ$7d8366d8-9cc5-49b3-8db3-1b9db6d12c92¥downstream_cells_mapÅ•scansëŸ$60fe5916-a1a6-11ec-1fbe-8952690e9d06≤upstream_cells_mapÇ°:êßcollectêŸ$47dfa770-47ea-47ee-98e7-87da471ab01cÑ¥precedence_heuristic	ßcell_idŸ$47dfa770-47ea-47ee-98e7-87da471ab01c¥downstream_cells_mapÅ¶new_dfëŸ$a0872982-dcbb-4278-beaf-70409400b514≤upstream_cells_mapÉ°:ê§vcatê£dfsëŸ$60fe5916-a1a6-11ec-1fbe-8952690e9d06Ÿ$60fe5916-a1a6-11ec-1fbe-8952690e9d06Ñ¥precedence_heuristic	ßcell_idŸ$60fe5916-a1a6-11ec-1fbe-8952690e9d06¥downstream_cells_mapÅ£dfsëŸ$47dfa770-47ea-47ee-98e7-87da471ab01c≤upstream_cells_mapﬁ +°>ê¶islessêßpredictê¶VENDERëŸ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6b°<ê¨mask_insertsê°/ê•scansëŸ$7d8366d8-9cc5-49b3-8db3-1b9db6d12c92©DataFrameê§meanê∞dcm_list_builderê£absê£divê¢=>ê®@formulaê¶medianê™DICOMUtilsëŸ$34a6ee83-5c46-4661-910e-925ea33ef625•push!ê°-ê¢√∑êπDICOMUtils.get_pixel_sizeê°+ê°*ê®mask_rodê•Arrayê™Integratedê©BASE_PATHëŸ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6b¶stringê´StatsModelsê™mask_heartê¶dilateê°:ê™dcm_readerê®basenameê¢lmê§Boolê§sizeê©mapwindowê•scoreê°~ê•undefê∞StatsModels.Termê•erodeêŸ$c8b89590-c7c4-4c40-93c4-9fd905eb3328Ñ¥precedence_heuristic	ßcell_idŸ$c8b89590-c7c4-4c40-93c4-9fd905eb3328¥downstream_cells_mapÄ≤upstream_cells_mapÅ®getindexê¥cell_execution_orderöŸ$34a6ee83-5c46-4661-910e-925ea33ef625Ÿ$c34ae2e3-466f-4280-8786-b0e92dbb2792Ÿ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6bŸ$7d8366d8-9cc5-49b3-8db3-1b9db6d12c92Ÿ$60fe5916-a1a6-11ec-1fbe-8952690e9d06Ÿ$c8b89590-c7c4-4c40-93c4-9fd905eb3328Ÿ$47dfa770-47ea-47ee-98e7-87da471ab01cŸ$e730f5ae-ae32-4869-9a59-98933bcba510Ÿ$75e9e00c-9603-46e9-a009-7cdc76f1a2ccŸ$a0872982-dcbb-4278-beaf-70409400b514¥last_hot_reload_timeÀ        ©shortpathºintegrated_scoring_script.jlÆprocess_status•ready§pathŸX/home/runner/work/CAC-stanford-data/CAC-stanford-data/julia/integrated_scoring_script.jlÆlast_save_timeÀAÿû[‹™Ç™cell_orderöŸ$34a6ee83-5c46-4661-910e-925ea33ef625Ÿ$c34ae2e3-466f-4280-8786-b0e92dbb2792Ÿ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6bŸ$7d8366d8-9cc5-49b3-8db3-1b9db6d12c92Ÿ$60fe5916-a1a6-11ec-1fbe-8952690e9d06Ÿ$c8b89590-c7c4-4c40-93c4-9fd905eb3328Ÿ$47dfa770-47ea-47ee-98e7-87da471ab01cŸ$e730f5ae-ae32-4869-9a59-98933bcba510Ÿ$75e9e00c-9603-46e9-a009-7cdc76f1a2ccŸ$a0872982-dcbb-4278-beaf-70409400b514±published_objectsÄ•nbpkgá≤installed_versionsÄ∞terminal_outputsÄßenabled¬∑restart_recommended_msg¿¥restart_required_msg¿≠busy_packagesê¨instantiated√´cell_inputsäŸ$34a6ee83-5c46-4661-910e-925ea33ef625Ñßcell_idŸ$34a6ee83-5c46-4661-910e-925ea33ef625§code⁄Îbegin
	let
		using Pkg
		Pkg.activate(mktempdir())
		Pkg.Registry.update()
		Pkg.add("PlutoUI")
		Pkg.add("Statistics")
		Pkg.add("StatsBase")
		Pkg.add("ImageMorphology")
		Pkg.add("ImageFiltering")
		Pkg.add("CSV")
		Pkg.add("DataFrames")
		Pkg.add("GLM")
		Pkg.add(url="https://github.com/JuliaHealth/DICOM.jl")
		Pkg.add(url="https://github.com/Dale-Black/DICOMUtils.jl")
		Pkg.add(url="https://github.com/Dale-Black/PhantomSegmentation.jl")
		Pkg.add(url="https://github.com/Dale-Black/CalciumScoring.jl")
	end
	
	using PlutoUI
	using Statistics
	using StatsBase: quantile!
	using ImageMorphology
	using ImageFiltering
	using CSV
	using DataFrames
	using GLM
	using DICOM
	using DICOMUtils
	using PhantomSegmentation
	using CalciumScoring
end®metadataÇ©show_logs√®disabled¬´code_folded¬Ÿ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6bÑßcell_idŸ$ff0a6e93-9c5e-4ac2-af02-ce253b535c6b§codeŸgbegin
	VENDER = "Canon_Aquilion_One_Vision"
	BASE_PATH = "/Users/daleblack/Google Drive/Datasets/"
end;®metadataÇ©show_logs√®disabled¬´code_folded¬Ÿ$e730f5ae-ae32-4869-9a59-98933bcba510Ñßcell_idŸ$e730f5ae-ae32-4869-9a59-98933bcba510§codeŸÆif ~isdir(string(cd(pwd, "..") , "/data/output/", VENDER, "_integrated_score_script"))
	mkdir(string(cd(pwd, "..") , "/data/output/", VENDER, "_integrated_score_script"))
end®metadataÇ©show_logs√®disabled¬´code_folded¬Ÿ$75e9e00c-9603-46e9-a009-7cdc76f1a2ccÑßcell_idŸ$75e9e00c-9603-46e9-a009-7cdc76f1a2cc§codeŸhoutput_path = string(cd(pwd, "..") , "/data/output/", VENDER, "_integrated_score_script", "/output.csv")®metadataÇ©show_logs√®disabled¬´code_folded¬Ÿ$a0872982-dcbb-4278-beaf-70409400b514Ñßcell_idŸ$a0872982-dcbb-4278-beaf-70409400b514§codeæCSV.write(output_path, new_df)®metadataÇ©show_logs√®disabled¬´code_folded¬Ÿ$c34ae2e3-466f-4280-8786-b0e92dbb2792Ñßcell_idŸ$c34ae2e3-466f-4280-8786-b0e92dbb2792§code±TableOfContents()®metadataÇ©show_logs√®disabled¬´code_folded¬Ÿ$7d8366d8-9cc5-49b3-8db3-1b9db6d12c92Ñßcell_idŸ$7d8366d8-9cc5-49b3-8db3-1b9db6d12c92§codeµscans = collect(1:10)®metadataÇ©show_logs√®disabled¬´code_folded¬Ÿ$47dfa770-47ea-47ee-98e7-87da471ab01cÑßcell_idŸ$47dfa770-47ea-47ee-98e7-87da471ab01c§codeªnew_df = vcat(dfs[1:10]...)®metadataÇ©show_logs√®disabled¬´code_folded¬Ÿ$60fe5916-a1a6-11ec-1fbe-8952690e9d06Ñßcell_idŸ$60fe5916-a1a6-11ec-1fbe-8952690e9d06§code⁄Ãbegin
	dfs = []
	for s in scans
		SCAN_NUMBER = s
		root_path = string(BASE_PATH, VENDER)
		dcm_path_list = dcm_list_builder(root_path)
		pth = dcm_path_list[SCAN_NUMBER]
		scan = basename(pth)
		header, dcm_array, slice_thick_ori1 = dcm_reader(pth)
	
		# Segment Heart
		masked_array, center_insert, mask = mask_heart(header, dcm_array, size(dcm_array, 3)√∑2)
	
		# Segment Calcium Rod
		calcium_image, slice_CCI, quality_slice, cal_rod_slice = mask_rod(masked_array, header)
	
		# Calibration Prep
		array_filtered = abs.(mapwindow(median, calcium_image[:, :, cal_rod_slice], (3, 3)))
		bool_arr = array_filtered .> 0
		bool_arr_erode = (((erode(erode(bool_arr)))))
		c_img = calcium_image[:, :, cal_rod_slice-1:cal_rod_slice+1]
		mask_cal_3D = Array{Bool}(undef, size(c_img))
		for z in 1:size(c_img, 3)
			mask_cal_3D[:, :, z] = bool_arr_erode
		end
		cal_insert_mean = mean(c_img[mask_cal_3D])
		# cal_insert_mean = quantile!(c_img[mask_cal_3D], 0.7)

		# Calibration line
		density_array_calc = [0, 200] # mg/cc
		intensity_array = [0, cal_insert_mean] # HU
		df_cal = DataFrame(:density => density_array_calc, :intensity => intensity_array)
		linearRegressor = lm(@formula(intensity ~ density), df_cal)
		linearFit = predict(linearRegressor)
		m = linearRegressor.model.pp.beta0[2]
		b = linearRegressor.model.rr.mu[1]
		density(intensity) = (intensity - b) / m
		intensity(œÅ) = m*œÅ + b

		# angle_factor = RMSE_Dict["factor"]
		angle_factor = -4
		mask_L_HD, mask_M_HD, mask_S_HD, mask_L_MD, mask_M_MD, mask_S_MD, mask_L_LD, mask_M_LD, mask_S_LD = mask_inserts(
			dcm_array, masked_array, header, slice_CCI, center_insert; angle_factor=angle_factor)
	
		arr = masked_array[:, :, slice_CCI-3:slice_CCI+3]
		single_arr = masked_array[:, :, slice_CCI]
		pixel_size = DICOMUtils.get_pixel_size(header)
		
		# Score Large InsertS
		## High Density
		mask_L_HD_3D = Array{Bool}(undef, size(arr))
		for z in 1:size(arr, 3)
			mask_L_HD_3D[:, :, z] = mask_L_HD
		end
		dilated_mask_L_HD = dilate(dilate(mask_L_HD_3D))
		ring_mask_L_HD = dilate(dilate(dilate(dilate(mask_L_HD_3D)))) - dilate(dilate(dilate(mask_L_HD_3D)))
		single_ring_mask_L_HD = Bool.(ring_mask_L_HD[:, :, 3])
		s_bkg_L_HD = mean(single_arr[single_ring_mask_L_HD])
		S_Obj_HD = intensity(800)
		œÅ_hd = 0.8 # mg/mm^3
		alg_L_HD = Integrated(arr[mask_L_HD_3D])
		mass_l_hd = score(s_bkg_L_HD, S_Obj_HD, pixel_size, œÅ_hd, alg_L_HD)
	
		## Medium Density
		mask_L_MD_3D = Array{Bool}(undef, size(arr))
		for z in 1:size(arr, 3)
			mask_L_MD_3D[:, :, z] = mask_L_MD
		end
		dilated_mask_L_MD = dilate(dilate(mask_L_MD_3D))
		ring_mask_L_MD = dilate(dilate(dilate(dilate(mask_L_MD_3D)))) - dilate(dilate(dilate(mask_L_MD_3D)))
		single_ring_mask_L_MD = Bool.(ring_mask_L_MD[:, :, 3])
		s_bkg_L_MD = mean(single_arr[single_ring_mask_L_MD])
		S_Obj_MD = intensity(400)
		œÅ_md = 0.4 # mg/mm^3
		alg_L_MD = Integrated(arr[mask_L_MD_3D])
		mass_l_md = score(s_bkg_L_MD, S_Obj_MD, pixel_size, œÅ_md, alg_L_MD)
	
		## Low Density
		mask_L_LD_3D = Array{Bool}(undef, size(arr))
		for z in 1:size(arr, 3)
			mask_L_LD_3D[:, :, z] = mask_L_LD
		end
		dilated_mask_L_LD = dilate(dilate(mask_L_LD_3D))
		ring_mask_L_LD = dilate(dilate(dilate(dilate(mask_L_LD_3D)))) - dilate(dilate(dilate(mask_L_LD_3D)))
		single_ring_mask_L_LD = Bool.(ring_mask_L_LD[:, :, 3])
		s_bkg_L_LD = mean(single_arr[single_ring_mask_L_LD])
		S_Obj_LD = intensity(200)
		œÅ_ld = 0.2 # mg/mm^3
		alg_L_LD = Integrated(arr[mask_L_LD_3D])
		mass_l_ld = score(s_bkg_L_LD, S_Obj_LD, pixel_size, œÅ_ld, alg_L_LD)
		
		# Score Medium Inserts
		## High Density
		mask_M_HD_3D = Array{Bool}(undef, size(arr))
		for z in 1:size(arr, 3)
			mask_M_HD_3D[:, :, z] = mask_M_HD
		end
		dilated_mask_M_HD = dilate(dilate(dilate(dilate(mask_M_HD_3D))))
		ring_mask_M_HD = dilate(dilate(dilate(dilate(dilate(mask_M_HD_3D))))) - dilate(dilate(dilate(dilate(mask_M_HD_3D))))
		single_ring_mask_M_HD = Bool.(ring_mask_M_HD[:, :, 3])
		s_bkg_M_HD = mean(single_arr[single_ring_mask_M_HD])
		alg_M_HD = Integrated(arr[mask_M_HD_3D])
		mass_m_hd = score(s_bkg_M_HD, S_Obj_HD, pixel_size, œÅ_hd, alg_M_HD)
		
		## Medium Density
		mask_M_MD_3D = Array{Bool}(undef, size(arr))
		for z in 1:size(arr, 3)
			mask_M_MD_3D[:, :, z] = mask_M_MD
		end
		dilated_mask_M_MD = dilate(dilate(dilate(dilate(mask_M_MD_3D))))
		ring_mask_M_MD = dilate(dilate(dilate(dilate(dilate(dilate(mask_M_MD_3D)))))) - dilate(dilate(dilate(dilate(dilate(mask_M_MD_3D)))))
		single_ring_mask_M_MD = Bool.(ring_mask_M_MD[:, :, 3])
		s_bkg_M_MD = mean(single_arr[single_ring_mask_M_MD])
		alg_M_MD = Integrated(arr[mask_M_MD_3D])
		mass_m_md = score(s_bkg_M_MD, S_Obj_MD, pixel_size, œÅ_md, alg_M_MD)
	
		## Low Density
		mask_M_LD_3D = Array{Bool}(undef, size(arr))
		for z in 1:size(arr, 3)
			mask_M_LD_3D[:, :, z] = mask_M_LD
		end
		dilated_mask_M_LD = dilate(dilate(dilate(dilate(dilate(mask_M_LD_3D)))))
		ring_mask_M_LD = dilate(dilate(dilate(dilate(dilate(dilate(mask_M_LD_3D)))))) - dilate(dilate(dilate(dilate(dilate(mask_M_LD_3D)))))
		single_ring_mask_M_LD = Bool.(ring_mask_M_LD[:, :, 3])
		s_bkg_M_LD = mean(single_arr[single_ring_mask_M_LD])
		alg_M_LD = Integrated(arr[mask_M_LD_3D])
		mass_m_ld = score(s_bkg_M_LD, S_Obj_LD, pixel_size, œÅ_ld, alg_M_LD)
		
	
		# Score Small Inserts
		## High Density
		mask_S_HD_3D = Array{Bool}(undef, size(arr))
		for z in 1:size(arr, 3)
			mask_S_HD_3D[:, :, z] = mask_S_HD
		end
		dilated_mask_S_HD = dilate(dilate(dilate(dilate(dilate((mask_S_HD_3D))))))
		ring_mask_S_HD = dilate(dilate(dilate(dilate(dilate(mask_S_HD_3D))))) - dilate(dilate(dilate(dilate(mask_S_HD_3D))))
		single_ring_mask_S_HD = Bool.(ring_mask_S_HD[:, :, 3])
		s_bkg_S_HD = mean(single_arr[single_ring_mask_S_HD])
		alg_S_HD = Integrated(arr[mask_S_HD_3D])
		mass_s_hd = score(s_bkg_S_HD, S_Obj_HD, pixel_size, œÅ_hd, alg_S_HD)
	
		## Medium Density
		mask_S_MD_3D = Array{Bool}(undef, size(arr))
		for z in 1:size(arr, 3)
			mask_S_MD_3D[:, :, z] = mask_S_MD
		end
		dilated_mask_S_MD = dilate(dilate(dilate(dilate(dilate(mask_S_MD_3D)))))
		ring_mask_S_MD = dilate(dilate(dilate(dilate(dilate(mask_S_MD_3D))))) - dilate(dilate(dilate(dilate(mask_S_MD_3D))))
		single_ring_mask_S_MD = Bool.(ring_mask_S_MD[:, :, 3])
		s_bkg_S_MD = mean(single_arr[single_ring_mask_S_MD])
		alg_S_MD = Integrated(arr[mask_S_MD_3D])
		mass_s_md = score(s_bkg_S_MD, S_Obj_MD, pixel_size, œÅ_md, alg_S_MD)
		
		## Low Density
		mask_S_LD_3D = Array{Bool}(undef, size(arr))
		for z in 1:size(arr, 3)
			mask_S_LD_3D[:, :, z] = mask_S_LD
		end
		dilated_mask_S_LD = dilate(dilate(dilate(dilate(dilate(mask_S_LD_3D)))))
		ring_mask_S_LD = dilate(dilate(dilate(dilate(dilate(mask_S_LD_3D))))) - dilate(dilate(dilate(dilate(mask_S_LD_3D))))
		single_ring_mask_S_LD = Bool.(ring_mask_S_LD[:, :, 3])
		s_bkg_S_LD = mean(single_arr[single_ring_mask_S_LD])
		alg_S_LD = Integrated(arr[mask_S_LD_3D])
		mass_s_ld = score(s_bkg_S_LD, S_Obj_LD, pixel_size, œÅ_ld, alg_S_LD)
		
		# Results
		density_array = [0, 200, 400, 800]
		inserts = [
			"Low Density",
			"Medium Density",
			"High Density"
		]
		ground_truth_mass_large = [
			19.6,
			39.3,
			78.5
		] # mg
		
		calculated_mass_large = [
			mass_l_ld,
			mass_l_md,
			mass_l_hd
		]
		ground_truth_mass_medium = [
			4.2,
			8.5,
			17.0
		]
		calculated_mass_medium = [
			mass_m_ld,
			mass_m_md,
			mass_m_hd
		]
		ground_truth_mass_small = [
			0.2,
			0.3,
			0.6
		]
		calculated_mass_small = [
			mass_s_ld,
			mass_s_md,
			mass_s_hd
		]
		
		df = DataFrame(
			scan = scan,
			inserts = inserts,
			ground_truth_mass_large = ground_truth_mass_large,
			calculated_mass_large = calculated_mass_large,
			ground_truth_mass_medium = ground_truth_mass_medium,
			calculated_mass_medium = calculated_mass_medium,
			ground_truth_mass_small = ground_truth_mass_small,
			calculated_mass_small = calculated_mass_small
		)
		push!(dfs, df)
	end
end®metadataÇ©show_logs√®disabled¬´code_folded¬Ÿ$c8b89590-c7c4-4c40-93c4-9fd905eb3328Ñßcell_idŸ$c8b89590-c7c4-4c40-93c4-9fd905eb3328§code∏md"""
# Save Results
"""®metadataÇ©show_logs√®disabled¬´code_folded√´notebook_idŸ$c73c3062-cfce-11ec-0e80-df3e3e054dde´in_temp_dir¬